use_r("utils")
library(devtools)
library(tidyverse)
library(fs)
use_r("utils")
load_all()
x <- data.frame("SN" = 1:2, "Age" = c(21,15), "Name" = c("John","Dora"))
y <- data.frame("SN" = 1:2, "Age" = c(21,15), "Name" = c("John","Dora"))
fastmerge(x,y)
check()
use_gpl3_license("Mohammed El-Kebir")
check()
x <- data.frame("X"=1:2, "Y"=c("a","b"))
fastmerge(x,y)
document()
?fastmerge
check()
install()
use_testthat()
use_test("fastmerge")
library(testthat)
load_all()
test()
use_package("deconstructSigs")
use_package("graph")
has_devel()
install.packages("available")
library(available)
available("PhySigs")
install.packages("styler")
styler:::style_active_file()
use_r("exposure")
use_r("plotTree")
use_package("RColorBrewer")
use_package("Rgraphviz")
styler:::style_active_file()
styler:::style_selection()
styler:::style_active_file()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
load_all()
styler:::style_active_pkg()
x <- data.frame("a;b;c" = 1:2)
expand(x)
x
x <- data.frame("a;b;c" = 1:2)
expand(x)
strsplit("a;b;c", ";")
x <- data.frame("a;b;c" = 1:2)
x
for (col in names(x)) {
s <- unlist(strsplit(col, ";"))
}
str(a;b;c)
str("a;b;c")
x <- data.frame(str("a;b;c") = 1:2)
";"
"a;b"
"a;b" <- c(.2,.3,.5)
expand(data.frame("a;b"))
expand(data.frame("a;b" = c(.2,.3,.5)))
expand(data.frame(""a;b"" = c(.2,.3,.5)))
expand(data.frame("a;b" = c(.2,.3,.5), stringsAsFactors=FALSE))
expand(data.frame("a;b" = c(.2,.3,.5), stringsAsFactors=TRUE))
x <- data.frame("a;b;c" = 1:2)
colnames(x) <- "a;b;c"
x
expand(x)
data.frame(1:2)
x <- data.frame(c(.2,.3,.5))
colnames(x) <- "a;b;c"
expand(x)
x <- data.frame(c(.2,.3,.5), c(.1,.7,.2))
colnames(x) <- c("a;b;c", "1;2;3")
expand(x)
document()
?expand
load_all()
expand(x)
document()
?expand
document()
?expand
styler:::style_active_file()
document()
?expand
document()
check()
document()
check()
document()
styler:::style_active_file()
styler:::style_active_file()
document()
styler:::style_active_file()
document()
check()
check()
document()
check()
document()
check()
use_r("io")
document()
check()
check()
S <- c("Signature.1", "Signature.3")
tree_matrix <- read.csv(file="/Users/sarahchristensen/Documents/UIUC/Bioinformatics/Signatures/old_phySigs/data/example/tree.csv", header=TRUE, sep=",")
V1 <- as.character(tree_matrix$V1)
V2 <- as.character(tree_matrix$V2)
node_ids <- unique(union(V1, V2))
T <- new("graphNEL", nodes=node_ids, edgemode="directed")
for (i in 1:nrow(tree_matrix)){
T <- addEdge(V1[i], V2[i], T, 1)
}
for (i in 1:nrow(tree_matrix)){
T <- graph::addEdge(V1[i], V2[i], T, 1)
}
input_mat <- as.data.frame(read.csv(file="/Users/sarahchristensen/Documents/UIUC/Bioinformatics/Signatures/old_phySigs/data/example/tree.snv", colClasses = c("character", "character", "numeric", "character", "character")))
input_mat <- as.data.frame(read.csv(file="/Users/sarahchristensen/Documents/UIUC/Bioinformatics/Signatures/old_phySigs/data/example/snv.csv", colClasses = c("character", "character", "numeric", "character", "character")))
P <- deconstructSigs::mut.to.sigs.input(mut.ref = input_mat,
sample.id = "Sample",
chr = "chr",
pos = "pos",
ref = "ref",
alt = "alt")
P_Norm <- normalizeFeatureMatrix(P, "genome")
load_all()
P_Norm <- normalizeFeatureMatrix(P, "genome")
install()
P_Norm <- normalizeFeatureMatrix(P, "genome")
document()
check()
P_Norm <- normalizeFeatureMatrix(P, "genome")
load_all()
P_Norm <- normalizeFeatureMatrix(P, "genome")
install()
P_Norm <- normalizeFeatureMatrix(P, "genome")
load_all()
P_Norm <- normalizeFeatureMatrix(P, "genome")
'tri.counts.genome' %in% getNamespaceExports(getNamespace('deconstructSigs'))
'getTriContextFraction' %in% getNamespaceExports(getNamespace('deconstructSigs'))
deconstructSigs::tri.counts.genome
load_all()
P_Norm <- normalizeFeatureMatrix(P, "genome")
document()
check()
install()
P_Norm <- normalizeFeatureMatrix(P, "genome")
load_all()
P_Norm <- normalizeFeatureMatrix(P, "genome")
load_all()
P_Norm <- normalizeFeatureMatrix(P, "genome")
load_all()
P_Norm <- normalizeFeatureMatrix(P, "genome")
E_list <- allTreeExposures(T, P_Norm, S)
k <- 1
error <- getError(P_Norm, E_list[[k]], S)
bic <- getBIC(P_Norm, E_list[[k]], S)
usethis::use_data(P)
usethis::use_data(P_Norm)
usethis::use_data(E_list)
usethis::use_data(S)
usethis::use_data(T)
document()
check()
document()
check()
document()
check()
document()
check()
use_r("data")
document()
check()
class(S)
View(P)
document()
check()
document()
check()
document()
check()
document()
check()
View(E_list)
document()
check()
document()
check()
install()
T_tree <- T
usethis::use_data(T_tree)
document()
document()
check()
document()
check()
document()
check()
check()
usethis::use_package("Rgraphviz", "Suggests")
usethis::use_package("Rgraphviz", "Suggests")
usethis::use_package("RColorBrewer", "Suggests")
usethis::use_package("RColorBrewer", "Suggests")
packageVersion("testthat")
check()
version("graph")
packageVersion("graph")
packageVersion("graph")
check()
check()
